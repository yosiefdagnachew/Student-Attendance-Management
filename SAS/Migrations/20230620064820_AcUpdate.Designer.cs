// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAS.Data;

#nullable disable

namespace SAS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230620064820_AcUpdate")]
    partial class AcUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SAS.Models.Academic_Year", b =>
                {
                    b.Property<int>("Academic_y_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Academic_y_id"));

                    b.Property<string>("Academic_yearName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Academic_y_id");

                    b.ToTable("Academic_Year");
                });

            modelBuilder.Entity("SAS.Models.Attendance", b =>
                {
                    b.Property<int>("Attendance_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Attendance_id"));

                    b.Property<int>("Academic_y_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Attendance_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Attendance_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Department_id")
                        .HasColumnType("int");

                    b.Property<int>("Enrollment_id")
                        .HasColumnType("int");

                    b.Property<int>("Faculity_id")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semister_id")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stud_id")
                        .HasColumnType("int");

                    b.HasKey("Attendance_id");

                    b.HasIndex("Academic_y_id");

                    b.HasIndex("Department_id");

                    b.HasIndex("Enrollment_id");

                    b.HasIndex("Faculity_id");

                    b.HasIndex("Semister_id");

                    b.HasIndex("Stud_id");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("SAS.Models.Class", b =>
                {
                    b.Property<int>("Class_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Class_id"));

                    b.Property<string>("Building_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Class_id");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("SAS.Models.Class_program", b =>
                {
                    b.Property<int>("ClassProgram_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassProgram_id"));

                    b.Property<int>("Class_id")
                        .HasColumnType("int");

                    b.Property<int>("Course_id")
                        .HasColumnType("int");

                    b.Property<int>("Faculity_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Period")
                        .HasColumnType("datetime2");

                    b.Property<int>("Teacher_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassProgram_id");

                    b.HasIndex("Class_id");

                    b.HasIndex("Course_id");

                    b.HasIndex("Faculity_id");

                    b.HasIndex("Teacher_id");

                    b.ToTable("Class_program");
                });

            modelBuilder.Entity("SAS.Models.Course", b =>
                {
                    b.Property<int>("Course_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Course_id"));

                    b.Property<string>("Course_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course_credit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course_descrption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Course_id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("SAS.Models.Course_teacher", b =>
                {
                    b.Property<int>("Course_teacher_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Course_teacher_id"));

                    b.Property<int>("Academic_y_id")
                        .HasColumnType("int");

                    b.Property<int>("Course_id")
                        .HasColumnType("int");

                    b.Property<int>("Department_id")
                        .HasColumnType("int");

                    b.Property<int>("Faculity_id")
                        .HasColumnType("int");

                    b.Property<int>("Semester_id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Teacher_id")
                        .HasColumnType("int");

                    b.HasKey("Course_teacher_id");

                    b.HasIndex("Academic_y_id");

                    b.HasIndex("Course_id");

                    b.HasIndex("Department_id");

                    b.HasIndex("Faculity_id");

                    b.HasIndex("Semester_id");

                    b.HasIndex("Teacher_id");

                    b.ToTable("Course_teacher");
                });

            modelBuilder.Entity("SAS.Models.Department", b =>
                {
                    b.Property<int>("Department_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Department_id"));

                    b.Property<string>("Department_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Department_id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("SAS.Models.Department_course", b =>
                {
                    b.Property<int>("Dept_course_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Dept_course_id"));

                    b.Property<int>("Course_id")
                        .HasColumnType("int");

                    b.Property<int>("Department_id")
                        .HasColumnType("int");

                    b.Property<int>("Semester_id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year_id")
                        .HasColumnType("int");

                    b.HasKey("Dept_course_id");

                    b.HasIndex("Course_id");

                    b.HasIndex("Department_id");

                    b.HasIndex("Semester_id");

                    b.HasIndex("Year_id");

                    b.ToTable("Department_course");
                });

            modelBuilder.Entity("SAS.Models.Enrollment", b =>
                {
                    b.Property<int>("Enrollement_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Enrollement_id"));

                    b.Property<int>("Academic_y_id")
                        .HasColumnType("int");

                    b.Property<int>("Course_id")
                        .HasColumnType("int");

                    b.Property<int>("Department_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Enrollment_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Faculity_id")
                        .HasColumnType("int");

                    b.Property<int>("Semester_id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stud_id")
                        .HasColumnType("int");

                    b.HasKey("Enrollement_id");

                    b.HasIndex("Academic_y_id");

                    b.HasIndex("Course_id");

                    b.HasIndex("Department_id");

                    b.HasIndex("Faculity_id");

                    b.HasIndex("Semester_id");

                    b.HasIndex("Stud_id");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("SAS.Models.Faculity", b =>
                {
                    b.Property<int>("Faculity_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Faculity_id"));

                    b.Property<int>("Department_id")
                        .HasColumnType("int");

                    b.Property<string>("Faculty_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculty_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculty_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Faculity_id");

                    b.HasIndex("Department_id");

                    b.ToTable("Faculities");
                });

            modelBuilder.Entity("SAS.Models.Semester", b =>
                {
                    b.Property<int>("Semester_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Semester_id"));

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Semester_id");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("SAS.Models.Student", b =>
                {
                    b.Property<int>("Stud_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Stud_id"));

                    b.Property<int>("Academic_y_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Phone_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stud_fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stud_lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year_id")
                        .HasColumnType("int");

                    b.HasKey("Stud_id");

                    b.HasIndex("Academic_y_id");

                    b.HasIndex("Year_id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SAS.Models.Student_classProgram", b =>
                {
                    b.Property<int>("Student_Class_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Student_Class_id"));

                    b.Property<int>("Academic_y_id")
                        .HasColumnType("int");

                    b.Property<int>("ClassProgram_id")
                        .HasColumnType("int");

                    b.Property<int>("Department_id")
                        .HasColumnType("int");

                    b.Property<int>("Faculity_id")
                        .HasColumnType("int");

                    b.Property<int>("Semester_id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stud_id")
                        .HasColumnType("int");

                    b.HasKey("Student_Class_id");

                    b.HasIndex("Academic_y_id");

                    b.HasIndex("ClassProgram_id");

                    b.HasIndex("Department_id");

                    b.HasIndex("Faculity_id");

                    b.HasIndex("Semester_id");

                    b.HasIndex("Stud_id");

                    b.ToTable("Student_class");
                });

            modelBuilder.Entity("SAS.Models.Student_course", b =>
                {
                    b.Property<int>("Stud_course_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Stud_course_id"));

                    b.Property<int>("Academic_y_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Attendance_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Course_id")
                        .HasColumnType("int");

                    b.Property<int>("Department_id")
                        .HasColumnType("int");

                    b.Property<int>("Faculity_id")
                        .HasColumnType("int");

                    b.Property<int>("Semester_id")
                        .HasColumnType("int");

                    b.Property<int>("Stud_id")
                        .HasColumnType("int");

                    b.Property<int>("Year_id")
                        .HasColumnType("int");

                    b.HasKey("Stud_course_id");

                    b.HasIndex("Academic_y_id");

                    b.HasIndex("Course_id");

                    b.HasIndex("Department_id");

                    b.HasIndex("Faculity_id");

                    b.HasIndex("Semester_id");

                    b.HasIndex("Stud_id");

                    b.HasIndex("Year_id");

                    b.ToTable("Student_course");
                });

            modelBuilder.Entity("SAS.Models.Teacher", b =>
                {
                    b.Property<int>("Teacher_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Teacher_id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teacher_fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teacher_lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Teacher_id");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("SAS.Models.Year", b =>
                {
                    b.Property<int>("Year_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Year_id"));

                    b.Property<string>("year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Year_id");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAS.Models.Attendance", b =>
                {
                    b.HasOne("SAS.Models.Academic_Year", "Academic_year")
                        .WithMany("Attendance")
                        .HasForeignKey("Academic_y_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Department", "Department")
                        .WithMany("Attendance")
                        .HasForeignKey("Department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Enrollment", "Enrollment")
                        .WithMany("Attendance")
                        .HasForeignKey("Enrollment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Faculity", "Faculity")
                        .WithMany("Attendance")
                        .HasForeignKey("Faculity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Semester", "Semester")
                        .WithMany("Attendance")
                        .HasForeignKey("Semister_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Student", "Student")
                        .WithMany("Attendance")
                        .HasForeignKey("Stud_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic_year");

                    b.Navigation("Department");

                    b.Navigation("Enrollment");

                    b.Navigation("Faculity");

                    b.Navigation("Semester");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SAS.Models.Class_program", b =>
                {
                    b.HasOne("SAS.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("Class_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Course", "Course")
                        .WithMany("Class_program")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Faculity", "Faculity")
                        .WithMany("Class_program")
                        .HasForeignKey("Faculity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Teacher", "Teacher")
                        .WithMany("Class_program")
                        .HasForeignKey("Teacher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");

                    b.Navigation("Faculity");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SAS.Models.Course_teacher", b =>
                {
                    b.HasOne("SAS.Models.Academic_Year", "Academic_Year")
                        .WithMany("Course_teacher")
                        .HasForeignKey("Academic_y_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Course", "Course")
                        .WithMany("Course_teacher")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Department", "Department")
                        .WithMany("Course_teacher")
                        .HasForeignKey("Department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Faculity", "Faculity")
                        .WithMany("Course_teacher")
                        .HasForeignKey("Faculity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Semester", "Semester")
                        .WithMany("Course_teacher")
                        .HasForeignKey("Semester_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Teacher", "Teacher")
                        .WithMany("Course_teacher")
                        .HasForeignKey("Teacher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic_Year");

                    b.Navigation("Course");

                    b.Navigation("Department");

                    b.Navigation("Faculity");

                    b.Navigation("Semester");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SAS.Models.Department_course", b =>
                {
                    b.HasOne("SAS.Models.Course", "Course")
                        .WithMany("Department_course")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Department", "Department")
                        .WithMany("Department_course")
                        .HasForeignKey("Department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Semester", "Semester")
                        .WithMany("Department_course")
                        .HasForeignKey("Semester_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Year", "Year")
                        .WithMany("Department_course")
                        .HasForeignKey("Year_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Department");

                    b.Navigation("Semester");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("SAS.Models.Enrollment", b =>
                {
                    b.HasOne("SAS.Models.Academic_Year", "Academic_Year")
                        .WithMany("Enrollment")
                        .HasForeignKey("Academic_y_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Course", "Course")
                        .WithMany("Enrollment")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Department", "Department")
                        .WithMany("Enrollment")
                        .HasForeignKey("Department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Faculity", "Faculity")
                        .WithMany("Enrollment")
                        .HasForeignKey("Faculity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Semester", "Semester")
                        .WithMany("Enrollment")
                        .HasForeignKey("Semester_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Student", "Student")
                        .WithMany("Enrollment")
                        .HasForeignKey("Stud_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic_Year");

                    b.Navigation("Course");

                    b.Navigation("Department");

                    b.Navigation("Faculity");

                    b.Navigation("Semester");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SAS.Models.Faculity", b =>
                {
                    b.HasOne("SAS.Models.Department", "Department")
                        .WithMany("Faculity")
                        .HasForeignKey("Department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SAS.Models.Student", b =>
                {
                    b.HasOne("SAS.Models.Academic_Year", "Academic_year")
                        .WithMany("Student")
                        .HasForeignKey("Academic_y_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Year", "Year")
                        .WithMany("Student")
                        .HasForeignKey("Year_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic_year");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("SAS.Models.Student_classProgram", b =>
                {
                    b.HasOne("SAS.Models.Academic_Year", "Academic_Year")
                        .WithMany("Student_classProgram")
                        .HasForeignKey("Academic_y_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Class_program", "Class_program")
                        .WithMany("Student_classProgram")
                        .HasForeignKey("ClassProgram_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Department", "Department")
                        .WithMany("Student_classProgram")
                        .HasForeignKey("Department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Faculity", "Faculity")
                        .WithMany("Student_classProgram")
                        .HasForeignKey("Faculity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Semester", "Semester")
                        .WithMany("Student_classProgram")
                        .HasForeignKey("Semester_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Student", "Student")
                        .WithMany("Student_classProgram")
                        .HasForeignKey("Stud_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic_Year");

                    b.Navigation("Class_program");

                    b.Navigation("Department");

                    b.Navigation("Faculity");

                    b.Navigation("Semester");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SAS.Models.Student_course", b =>
                {
                    b.HasOne("SAS.Models.Academic_Year", "Academic_Year")
                        .WithMany("Student_Course")
                        .HasForeignKey("Academic_y_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Course", "Course")
                        .WithMany("Student_Course")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Department", "Department")
                        .WithMany("Student_courses")
                        .HasForeignKey("Department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Faculity", "Faculity")
                        .WithMany("Student_course")
                        .HasForeignKey("Faculity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Semester", "Semester")
                        .WithMany("Student_cours")
                        .HasForeignKey("Semester_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Student", "Student")
                        .WithMany("Student_course")
                        .HasForeignKey("Stud_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.Models.Year", "Year")
                        .WithMany("Student_course")
                        .HasForeignKey("Year_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic_Year");

                    b.Navigation("Course");

                    b.Navigation("Department");

                    b.Navigation("Faculity");

                    b.Navigation("Semester");

                    b.Navigation("Student");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("SAS.Models.Academic_Year", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("Course_teacher");

                    b.Navigation("Enrollment");

                    b.Navigation("Student");

                    b.Navigation("Student_Course");

                    b.Navigation("Student_classProgram");
                });

            modelBuilder.Entity("SAS.Models.Class_program", b =>
                {
                    b.Navigation("Student_classProgram");
                });

            modelBuilder.Entity("SAS.Models.Course", b =>
                {
                    b.Navigation("Class_program");

                    b.Navigation("Course_teacher");

                    b.Navigation("Department_course");

                    b.Navigation("Enrollment");

                    b.Navigation("Student_Course");
                });

            modelBuilder.Entity("SAS.Models.Department", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("Course_teacher");

                    b.Navigation("Department_course");

                    b.Navigation("Enrollment");

                    b.Navigation("Faculity");

                    b.Navigation("Student_classProgram");

                    b.Navigation("Student_courses");
                });

            modelBuilder.Entity("SAS.Models.Enrollment", b =>
                {
                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("SAS.Models.Faculity", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("Class_program");

                    b.Navigation("Course_teacher");

                    b.Navigation("Enrollment");

                    b.Navigation("Student_classProgram");

                    b.Navigation("Student_course");
                });

            modelBuilder.Entity("SAS.Models.Semester", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("Course_teacher");

                    b.Navigation("Department_course");

                    b.Navigation("Enrollment");

                    b.Navigation("Student_classProgram");

                    b.Navigation("Student_cours");
                });

            modelBuilder.Entity("SAS.Models.Student", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("Enrollment");

                    b.Navigation("Student_classProgram");

                    b.Navigation("Student_course");
                });

            modelBuilder.Entity("SAS.Models.Teacher", b =>
                {
                    b.Navigation("Class_program");

                    b.Navigation("Course_teacher");
                });

            modelBuilder.Entity("SAS.Models.Year", b =>
                {
                    b.Navigation("Department_course");

                    b.Navigation("Student");

                    b.Navigation("Student_course");
                });
#pragma warning restore 612, 618
        }
    }
}
